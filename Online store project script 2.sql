
SELECT * FROM Customers;

select * from Orders;
--Find all customers who have placed an order in the last year:

SELECT DISTINCT c.*
FROM Customers c
INNER JOIN Orders o ON c.CustomerID = o.CustomerID
WHERE o.OrderDate >= DATE_SUB(NOW(), INTERVAL 1 YEAR);


--total revenue generated by each product:

SELECT p.Name, SUM(od.Quantity * od.Price) AS Revenue
FROM Products p
INNER JOIN OrderDetails od ON p.ProductID = od.ProductID
GROUP BY p.ProductID;


--customers who have ordered a specific product

SELECT c.*
FROM Customers c
INNER JOIN Orders o ON c.CustomerID = o.CustomerID
INNER JOIN OrderDetails od ON o.OrderID = od.OrderID
WHERE od.ProductID =6;


--the products that have been ordered the most:

SELECT p.Name, SUM(od.Quantity) AS TotalOrdered
FROM Products p
INNER JOIN OrderDetails od ON p.ProductID = od.ProductID
GROUP BY p.ProductID
ORDER BY TotalOrdered DESC;


--top 5 customers by total spending:

SELECT c.Name, SUM(od.Quantity * od.Price) AS TotalSpending
FROM Customers c
INNER JOIN Orders o ON c.CustomerID = o.CustomerID
INNER JOIN OrderDetails od ON o.OrderID = od.OrderID
GROUP BY c.CustomerID
ORDER BY TotalSpending DESC
LIMIT 5;

--number of orders placed by each customer:

SELECT c.Name, COUNT(o.OrderID) AS NumOrders
FROM Customers c
LEFT JOIN Orders o ON c.CustomerID = o.CustomerID
GROUP BY c.CustomerID;


SELECT c.Name, AVG(od.Quantity * od.Price) AS AvgOrderValue
FROM Customers c
LEFT JOIN Orders o ON c.CustomerID = o.CustomerID
LEFT JOIN OrderDetails od ON o.OrderID = od.OrderID
GROUP BY c.CustomerID;


--customers who have not placed any orders:

SELECT c.*
FROM Customers c
LEFT JOIN Orders o ON c.CustomerID = o.CustomerID
WHERE o.OrderID IS NULL;


--TOP 5 ORDERED PRODUCTS for BUSINESS INSIGHT 

SELECT od.ProductID, p.Name, p.description, SUM(od.Quantity) AS TotalQuantity, COUNT(DISTINCT o.CustomerID) AS NumCustomers
FROM OrderDetails od
INNER JOIN Products p ON od.ProductID = p.ProductID
INNER JOIN Orders o ON od.OrderID = o.OrderID
GROUP BY od.ProductID
ORDER BY TotalQuantity DESC
LIMIT 5;


--why certain products are not being ordered,

SELECT p.ProductID, p.Name, p.description, p.Price, i.QuantityInStock, COUNT(od.OrderID) AS NumOrders
FROM Products p
LEFT JOIN Inventory i ON p.ProductID = i.ProductID
LEFT JOIN OrderDetails od ON p.ProductID = od.ProductID
GROUP BY p.ProductID
HAVING NumOrders = 0;